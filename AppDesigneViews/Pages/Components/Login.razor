@inject IUserRequestService _request
@inject NavigationManager _navigation

<div id="bodyLogin" class="container">
  <div id="body_item">
    <EditForm Model="login" OnValidSubmit="Authentication">
      <DataAnnotationsValidator />
      <ValidationSummary />

      <div class="form-group row">
        <span class="oi oi-person" aria-hidden="true">&nbsp;</span>
        <div class="col-sm-3">
          <InputText @bind-Value="login.UserLogin" class="form-control" />
          <ValidationMessage For="@(()=> login.UserLogin)" />
        </div>
      </div>

      <div class="form-group row">
        <span class="oi oi-key" aria-hidden="true">&nbsp;</span>
        <div class="col-sm-3">
          <InputText type="password" @bind-Value="login.Password" class="form-control" />
          <ValidationMessage For="@(()=> login.Password)" />
        </div>
      </div>

      <button class="btn btn-success" type="submit">Let me in</button>
    </EditForm>
  </div>
  <br />
  <p>Don't have an account? <a @onclick="Create" id="link_createAcc">create account</a></p>
</div>

<style scoped>

  #link_createAcc {
    color: #052c8a;
  }

  #link_createAcc:hover {
    color: #000e79;
    text-decoration: underline;
    cursor: pointer;
  }

  #bodyLogin{
    margin-top: 3%;
    padding-top: 5%;
  }
</style>


@if(User != null) {
  Authorized = true;
  _navigation.NavigateTo("/home");
}


@code {
  public static bool Authorized { get; set; }

  private User User { get; set; }

  private UserLoginModel login = new UserLoginModel();

  private void Create() {
    _navigation.NavigateTo("/user/register");
  }

  private async Task Authentication() {
    User = await _request.LogOn(login);
  }

}
