@inject ICarRequestService _request
@inject NavigationManager _navigation

@if(ListCar != null) {
  @foreach(var car in ListCar) {
    <GenericCarRender Delete="Delete" Update="Update" Car="car"/>
  }

}

<span> Current &lt;&lt; @CurrentPage &gt;&gt;&nbsp;</span>
<button @onclick="GetCarsForPreviousPage" class="btn btn-secondary">Previous</button>
<button @onclick="GetCarsForNextPage" class="btn btn-info">Next</button>


@code {

  // ----------------- Props -------------------------

  public List<Car> ListCar { get; set; }
  public int CurrentPage { get; set; } = 1;


  // ------------------- METHODS ---------------------

  protected override async Task OnInitializedAsync() {
    ListCar = await _request.GetAllForCurrentPage(CurrentPage);
  }

  private async Task GetCarsForNextPage() {
    CurrentPage++;
    var result = await _request.GetAllForCurrentPage(CurrentPage);
    if(result != null) {
      ListCar = result;
    } else {
      CurrentPage--;
      ListCar = await _request.GetAllForCurrentPage(CurrentPage);
    }
  }

  private void Delete(Car car) {
    _navigation.NavigateTo($"/home/car/delete/{car.Id}");
  }

  private void Update(Car car) {
    _navigation.NavigateTo($"/home/car/update/{car.Id}");
  }

  private async Task GetCarsForPreviousPage() {
    if(CurrentPage > 1) {
      CurrentPage--;
    }
    ListCar = await _request.GetAllForCurrentPage(CurrentPage);
  }
}
